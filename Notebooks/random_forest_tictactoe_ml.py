# -*- coding: utf-8 -*-
"""Random_Forest_TicTacToe_ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xMA8LAEPyqK01IDWXJQqRGeYA4_4gmri
"""

from google.colab import drive

drive.mount("/content/drive")

# pip install skorch

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
from sklearn.metrics import ConfusionMatrixDisplay

import torch
import torch.nn as nn
import torch.optim as optim
from skorch import NeuralNetClassifier, NeuralNetRegressor
import warnings

warnings.filterwarnings("ignore")

df = pd.read_csv(
    "/content/drive/MyDrive/Data/tictac_single.txt", delim_whitespace=True, header=None
)

df.head()

columns = [f"x{i}" for i in range(9)]
columns.append("y")

df.columns = columns

df.head()

# df['y'].value_counts()
# df['y'].nunique()

df.shape

y = df["y"]
X = df.drop(columns=["y"])
print(X.shape, y.shape)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

print(X_train.shape, X_test.shape)

model0 = RandomForestClassifier()

model0.fit(X_train, y_train)
y_predict = model0.predict(X_test)
model0_score = model0.score(X_test, y_test)

param_grid_rf = {
    "n_estimators": [100, 200, 300],
    "max_depth": [10, 20, 30],
    "min_samples_split": [2, 5, 10],
    "min_samples_leaf": [1, 2, 4],
    "max_features": ["auto", "sqrt"],
    "bootstrap": [True, False],
}

rf_grid = GridSearchCV(
    estimator=RandomForestClassifier(),
    param_grid=param_grid_rf,
    scoring="neg_mean_squared_error",
)

rf_grid.fit(X_train, y_train)

best_nn = rf_grid.best_estimator_
print(best_nn)

predicted_labels = best_nn.predict(X_test)

cnf_matrix = metrics.confusion_matrix(y_test, predicted_labels)
print(cnf_matrix)

target_names = df["y"].unique()
print(target_names)

disp = metrics.ConfusionMatrixDisplay(
    confusion_matrix=cnf_matrix, display_labels=target_names
)

# Plot the confusion matrix
disp.plot(cmap="Blues")
plt.show()

target_names = [str(i) for i in df["y"].unique()]
print(
    metrics.classification_report(y_test, predicted_labels, target_names=target_names)
)

import joblib

# Save the trained model
joblib.dump(best_nn, "/content/drive/MyDrive/Data/tic_tac_toe_rf_model.joblib")

import pickle

# Save the model to a file
with open("tic_tac_toe_rf_model.pkl", "wb") as file:
    pickle.dump(best_nn, file)
